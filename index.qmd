---
title: "IPGTT Data Cleaning and Analysis"
---

### Data Dictionary

```{r setup, include=FALSE}

# Importing necessary libraries
library(dplyr)
library(ggplot2)
library(plotly)
library(readxl)
library(stringr)
library(purrr)
library(showtext)
library(lme4)
library(emmeans)

okabe_ito_palette <- c( "#009E73","#D55E00", "#56B4E9", "#F0E442", "#0072B2", "#E69F00", "#CC79A7", "#999999")


# Define the color palette for the genotypes
color_palette <- c("Het-NOD" = "#D55E00", "KO-NOD" = "#56B4E9", "WT-WT" = "#009E73")

# Add the downloaded font
font_add("Source", "SourceCodePro-Regular.ttf")  # Specify the path to the font file
showtext_auto()  # Automatically use showtext for text rendering

```

| Name            | Data Type | Description                                            | Unit of Measurement |
|-------------|-------------|--------------------------------|-------------|
| mouse_id        | chr       | Unique identifier for each mouse                       | *NA*                |
| mouse           | chr       | Identifier or name assigned to each mouse              | *NA*                |
| genotype        | factor    | Genetic constitution of each mouse (e.g., WT, Het, KO) | *NA*                |
| sex             | factor    | Sex of the mouse (e.g., Male, Female)                  | *NA*                |
| test_week       | num       | Week number when the test was conducted                | weeks               |
| time_point      | num       | Specific time point at which data was collected        | min                 |
| body_weight     | num       | Body weight of the mouse                               | g                   |
| glucose reading | num       | Blood glucose level of the mouse                       | mg/dL               |

### Cleaning

##### Filtering Unnecessary Data:

```{r}
# Reading excel database
IPGTT_tidy_data_corrected <- read_excel("IPGTT_tidy_data_corrected.xlsx")
summary(IPGTT_tidy_data_corrected)

```

```{r}

# Removing Mouse and nan data values that were created during ChatGPT analysis
IPGTT_data <- IPGTT_tidy_data_corrected %>% filter(Mouse != "Mouse")
IPGTT_data <- IPGTT_data %>% filter(Mouse != "nan")

# Removing all rows where there are no body weight AND glucose readings
IPGTT_data <- IPGTT_data %>% filter(!(is.na(BW) & is.na(`Glucose Reading`)))



```

##### Changing variable names according to Tidy Data guidelines

```{r}
old_names <- names(IPGTT_data)

new_names <- c("mouse", "body_weight", "test_week", "genotype", "sex", "time_point", "glucose_reading")
names(IPGTT_data) <- new_names
```

##### Creating unique mouse ID's depending on its name and genotype

```{r}
IPGTT_data <- IPGTT_data %>% mutate(mouse_id = paste(mouse, genotype, sep = "-"))
```

##### Converting time_point from char to numeric

```{r}
IPGTT_data <- IPGTT_data %>% mutate(time_point = as.numeric(str_extract(time_point, "\\d+")))
```

##### Factors

```{r}
IPGTT_data$sex <-  factor(IPGTT_data$sex)
IPGTT_data$genotype <- factor(IPGTT_data$genotype, order = TRUE,levels = c("WT-WT", "Het-NOD", "KO-NOD"))



# Checking to see if data type changed
str(IPGTT_data)
```

##### Relocating columns for easier readability

```{r}
IPGTT_data <- IPGTT_data %>%
  select(mouse_id, mouse, genotype, sex, test_week, time_point, body_weight, glucose_reading, everything())
```

\

### Visualizations

```{r}
# Calculate average body weight and glucose reading by test_week and genotype
mean_data <- IPGTT_data %>%
  group_by(test_week, genotype) %>%
  summarise(mean_body_weight = mean(body_weight, na.rm = TRUE))

plot2 <-ggplot(mean_data, aes(x = test_week, y = mean_body_weight, color = genotype)) +
  geom_point() +
  geom_line(aes(x = test_week, y = mean_body_weight, color = genotype, group = genotype)) +
  geom_line(data = IPGTT_data, aes(x = test_week, y = body_weight, color = genotype, group = mouse_id), alpha = 0.5)+
  theme_minimal()+ scale_color_manual(values = color_palette) +
  labs(title = "Mean body weight over test weeks", x="Test Week", y = "Body Weight (g)",    subtitle = "(All 12 weeks of data)")+
  theme(legend.position = "bottom")+
  scale_x_continuous(breaks=seq(0,12, by=1)) 

  
  plotly_plot2 <- ggplotly(plot2, tooltip = c( "mouse_id", "test_week", "body_weight", "mean_body_weight")) %>%
  config(displayModeBar = FALSE) %>% 
  layout(legend = list(orientation = "h", x = 0.5, xanchor = "center", y = -0.2))

plotly_plot2
```

\

```{r}
#IPGTT trajectories overlaid with within-genotype medians

IPGTT_fil <- IPGTT_data %>% filter(!is.na(glucose_reading), test_week %in% 1:4)

median_data <- IPGTT_data %>% filter(!is.na(glucose_reading), test_week %in% 1:4)  %>% 
  group_by(time_point, genotype, test_week) %>%
  summarise(median_glucose_reading = median(glucose_reading, na.rm = TRUE))

plot1 <- ggplot(IPGTT_fil, aes(time_point, glucose_reading, color = genotype, group = mouse_id)) +
  geom_line(alpha = 0.3) +
  geom_line(data = median_data, aes(x = time_point, y = median_glucose_reading, color = genotype, group = genotype)) + 
  facet_wrap(~ test_week,  ncol = 4) +
  theme_minimal() +
  scale_x_continuous(breaks=seq(0,120, by=30)) +
  scale_color_manual(values = color_palette) +
  labs(title = "IPGTT trajectories overlaid with within-genotype medians", x="Test time (min)", y = "Blood glucose (mg/dL)",    subtitle = "(First four weeks of data)") +
  theme(legend.position = "bottom", axis.text.x = element_text(angle = 90))

plotly_plot1 <- ggplotly(plot1, tooltip = c( "mouse_id", "time_point", "glucose_reading", "median_glucose_reading")) %>%
  config(displayModeBar = FALSE) %>%
  layout(legend = list(orientation = "h", x = 0.5, xanchor = "center", y = -0.2))

plotly_plot1

```

\

```{r}

# Example usage
weeks_list <- list(1:4, 5:8, 9:12)
genotypes <- c("Het-NOD", "KO-NOD", "WT-WT")


# Helper function to filter data for given weeks and genotypes
filter_data <- function(data, weeks, genotypes) {
  data %>%
    filter(!is.na(glucose_reading), 
           test_week %in% weeks, 
           genotype %in% genotypes)
}

# Helper function to calculate medians for the filtered data
calculate_medians <- function(data) {
  data %>%
    group_by(time_point, genotype, test_week) %>%
    summarise(median_glucose_reading = median(glucose_reading, na.rm = TRUE), .groups = 'drop')
}

# Helper function to generate the plot
generate_plot <- function(data, medians, weeks, genotypes, color_palette) {
  
  
  colored_title <- paste(
    "<b>IPGTT trajectories for</b> ",
    paste(
      sprintf("<b><span style='color:%s;'>%s</span></b>", color_palette[genotypes], genotypes),
      collapse = " & "
    ),
    "<b>overlaid with within-genotype medians during weeks</b>",
     paste("<b>",weeks[1], "-",weeks[4], "</b>")
  )
  
  
  plot <- ggplot(data, aes(time_point, glucose_reading, color = genotype, group = mouse_id)) +
    geom_line(alpha = 0.3) +
    geom_line(data = medians, aes(x = time_point, y = median_glucose_reading, color = genotype, group = genotype)) + 
    facet_wrap(~ test_week, ncol = length(weeks)) +
    theme_minimal() +
    scale_x_continuous(breaks = seq(0, 120, by = 30)) +
    scale_color_manual(values = color_palette) +
     labs(
      title = "Placeholder",  # Title will be overridden by plotly layout
      x = "Test time (min)", 
      y = "Blood glucose (mg/dL)"
    ) +
    theme(text = element_text(family = "Source"), legend.position = "none", axis.text.x = element_text(angle = 90))

 ggplotly(plot, tooltip = c("mouse_id", "time_point", "glucose_reading", "median_glucose_reading")) %>%
    config(displayModeBar = FALSE) %>%
    layout(title = list(text = colored_title, font = list(size = 15), x = 0), 
           legend = list(orientation = "h", x = 0.5, xanchor = "center", y = -0.2),
            plot_bgcolor = "ivory",  # Set the plot background color in plotly
            paper_bgcolor = "ivory"  # Set the paper background color in plotly
           )
  
}

# Main function to iterate over weeks and genotypes using purrr
create_plots <- function(data, week_combinations, genotypes, color_palette) {
  genotype_combinations <- combn(genotypes, 2, simplify = FALSE)
  
  cross2(week_combinations, genotype_combinations) %>%
    map(~{
      weeks <- .x[[1]]
      genotype_pair <- .x[[2]]
      
      filtered_data <- filter_data(data, weeks, genotype_pair)
      median_data <- calculate_medians(filtered_data)
      
      generate_plot(filtered_data, median_data, weeks, genotype_pair, color_palette)
    
      
    })
}

plots <- create_plots(IPGTT_data, weeks_list, genotypes, color_palette)


#walk(plots, print)

for(plot in plots){
  print(plot)
}


```

```{r}

ipgtt_week_1 <- IPGTT_data %>% filter(test_week == 1)


ggplot(ipgtt_week_1, aes(time_point, glucose_reading, color = genotype))+
  geom_point(alpha = 0.1)+
  geom_smooth(method = "lm", se= FALSE) +
  facet_wrap(~genotype) +
  scale_color_manual(values = color_palette)



ipgtt_week_1_lm <- IPGTT_data %>% filter(test_week == 1) %>% 
  group_by(time_point, genotype, mouse_id) %>%  lm(glucose_reading ~ time_point + genotype + 0, data = .)

ipgtt_week_1_predicted_lm <- IPGTT_data %>% mutate(glucose_predict_lm = predict(ipgtt_week_1_lm, IPGTT_data))

ggplot(ipgtt_week_1_predicted_lm, aes(time_point, glucose_predict_lm, color = genotype)) +
  geom_line() +
  geom_point(data = IPGTT_data, aes(time_point, glucose_reading), alpha = 0.08) +
  theme_minimal() +
  scale_color_manual(values = color_palette)




broom::tidy(ipgtt_week_1_lm)
broom::glance(ipgtt_week_1_lm)

summary(ipgtt_week_1_lm)

IPGTT_data %>% filter(test_week == 1) %>% count(time_point, genotype)



IPGTT_data_clean <- na.omit(IPGTT_data)


IPGTT_mixed_model <- lmer(glucose_reading ~ time_point +  test_week + genotype + (1|mouse_id), data = IPGTT_data_clean)
ipgtt_predicted_mm <- IPGTT_data_clean %>%
  mutate(glucose_predict_mm = predict(IPGTT_mixed_model, data = IPGTT_data_clean))

broom.mixed::tidy(IPGTT_mixed_model)
broom.mixed::glance(IPGTT_mixed_model)

summary(IPGTT_mixed_model)$df

ggplot(ipgtt_predicted_mm, aes(time_point, glucose_predict_mm, color = genotype, group = mouse_id)) +
  geom_line()+
  geom_point(data = IPGTT_data_clean, aes(time_point, glucose_reading), alpha = 0.08) +
  theme_minimal() +
  scale_color_manual(values = color_palette)


emm <- emmeans(IPGTT_mixed_model, ~ time_point | test_week | genotype)

# Convert the emmeans results to a data frame for plotting
emm_df <- as.data.frame(emm)

View(emm_df)

# Plot the estimated marginal means
ggplot(emm_df, aes(x = time_point, y = emmean, color = genotype, group = genotype)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  scale_color_manual(values = color_palette) +
  labs(title = "Estimated Marginal Means of Glucose Readings",
       x = "Time Point",
       y = "Estimated Marginal Mean Glucose Reading")

# Calculate contrasts
contrast_emm <- contrast(emm, method = "pairwise", adjust = "tukey")

# Convert contrasts to a data frame for plotting
contrast_df <- as.data.frame(contrast_emm)

# Extract the necessary values for the error bars
contrast_df <- contrast_df %>%
  mutate(lower.CL = estimate - SE,
         upper.CL = estimate + SE)

#ggplot(contrast_df, aes(x = time_point, y = estimate, color = contrast, group = contrast)) +
#  geom_point() +
 # geom_errorbar(aes(ymin = estimate - SE, ymax = estimate + SE), width = 0.1) +
 # theme_minimal() +
  #labs(title = "Contrasts of Estimated Marginal Means",
  #     x = "Time Point",
  #     y = "Contrast Estimate")

```



```{r}
# Remove rows with missing values for model fitting
IPGTT_data_clean <- na.omit(IPGTT_data)

# Step 1: Fit the mixed model on the original data including test_week
IPGTT_mixed_model <- lmer(glucose_reading ~ time_point + test_week + genotype + (1 | mouse_id), data = IPGTT_data_clean)

# Step 2: Calculate the estimated marginal means for each genotype by test_week
emm <- emmeans(IPGTT_mixed_model, ~ genotype | test_week | time_point)

# Step 3: Calculate contrasts between genotype pairs for each test week
contrast_results <- contrast(emm, interaction = "pairwise")

# Convert the contrasts results to a data frame
contrast_df <- as.data.frame(contrast_results)

# Print the contrast results to check
print(contrast_df)

View(contrast_df)

# Step 4: Prepare for plotting the differences between genotype pairs
contrast_df <- contrast_df %>%
  mutate(contrast = rownames(contrast_df)) # Create a new column for contrasts

# Plot the contrasts
ggplot(contrast_df, aes(x = time_point, y = estimate, color = contrast, group = contrast)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = estimate - SE, ymax = estimate + SE), width = 0.1) +
  theme_minimal() +
  scale_color_manual(values = color_palette) +
  labs(title = "Differences in Estimated Marginal Means Between Genotypes by Test Week",
       x = "Time Point",
       y = "Contrast Estimate") +
  facet_wrap(~ test_week)  # Facet by test_week

```

```{r}

library(lme4)
library(emmeans)
library(ggplot2)
library(dplyr)
library(tidyr)


IPGTT_data_clean <- IPGTT_data %>% filter(test_week == 1) %>% na.omit() 


IPGTT_data_clean$time_point <- as.factor(IPGTT_data_clean$time_point)
IPGTT_data_clean$test_week <- as.factor(IPGTT_data_clean$test_week)

IPGTT_mixed_model <- lmer(glucose_reading ~ time_point * genotype + (1|mouse_id), data = IPGTT_data_clean)


emm <- emmeans(IPGTT_mixed_model, ~  genotype| time_point)

broom.mixed::tidy(emm) 

contrast_results <- pairs(emm, interaction = "pairwise")


contrast_df <- as.data.frame(contrast_results)


b <- ggplot(contrast_df, aes(x = time_point, y = estimate, color = genotype_pairwise)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = estimate - SE, ymax = estimate + SE), width = 0.1) +
  theme_minimal() +
  labs(title = "Differences in Means Between Genotypes (Week 1)",
       x = "Time Point",
       y = "Pairwise Difference")+
    facet_wrap(~ genotype_pairwise)+
  theme(legend.position = "bottom", axis.text.x = element_text(angle = 90))

ggplotly(b)

```
```{r}



IPGTT_data_clean_all_weeks <- IPGTT_data %>%  na.omit() 


IPGTT_data_clean_all_weeks$time_point <- as.factor(IPGTT_data_clean_all_weeks$time_point)
IPGTT_data_clean_all_weeks$test_week <- as.factor(IPGTT_data_clean_all_weeks$test_week)

IPGTT_mixed_model <- lmer(glucose_reading ~ time_point * test_week * genotype + (1|mouse_id), data = IPGTT_data_clean_all_weeks)


emm <- emmeans(IPGTT_mixed_model, ~  genotype | test_week| time_point)

broom.mixed::tidy(emm) 

contrast_results <- pairs(emm, interaction = "pairwise")

contrast_df <- as.data.frame(contrast_results)


c<- ggplot(contrast_df, aes(x = time_point, y = estimate, color = genotype_pairwise)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = estimate - SE, ymax = estimate + SE), width = 0.1) +
  theme_minimal() +
  labs(title = "Differences in Means Between Genotypes (Week 1)",
       x = "Time Point",
       y = "Pairwise Difference")+
  facet_wrap(~test_week)+
   theme(legend.position = "bottom", axis.text.x = element_text(angle = 90))

ggplotly(c)

```

















# FULL DATASET

```{r}

library(readxl)
library(dplyr)
library(tidyr)
library(here)

file_path <- here("Glucose Tracking Results.xlsx")
sheet_names <- excel_sheets(file_path)
sheet_names <- excel_sheets(file_path)
group_sheets <- sheet_names[grepl("Group (5|6|7|8|9|10|11)", sheet_names)]
print(group_sheets)

# Initialize a list to store cleaned data
cleaned_data_list <- list()

for (sheet in group_sheets) {
    data <- read_excel(file_path, sheet = sheet)
    
    # Print the first few rows of the dataframe to check the data
    print(head(data))
    
    # Convert the data from wide to long format
    id_col <- colnames(data)[1]
    measurement_cols <- colnames(data)[-1]
    
    long_data <- data %>%
      pivot_longer(cols = all_of(measurement_cols), 
                   names_to = "time_point", 
                   values_to = "glucose_level")
    
    # Perform data cleaning operations
    cleaned_data <- long_data %>%
      mutate(across(where(is.character), str_trim)) %>%
      mutate(time_point = str_replace_all(time_point, "[^0-9a-zA-Z]", "")) %>%
      mutate(extracted_info = str_extract(time_point, "\\d+"))
    
    # Add cleaned data to the list
    cleaned_data_list[[sheet]] <- cleaned_data
    
    # Print cleaned data to check the results
    print(head(cleaned_data))
}
```

```{r}
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)  # Ensure this library is loaded for string functions
library(here)

file_path <- here("Glucose Tracking Results.xlsx")
sheet_names <- excel_sheets(file_path)
group_sheets <- sheet_names[grepl("Group", sheet_names)]
print(group_sheets)

first_group_sheet <- group_sheets[6]
data <- read_excel(file_path, sheet = first_group_sheet)

data <- data %>%
  rename_with(~ str_replace_all(str_to_lower(.), " ", "_"))

data <- data %>%
  mutate(across(starts_with("1"):starts_with("20"), as.numeric))
  
  
  # Assuming your data frame is named 'data'
long_data <- data %>%
  pivot_longer(
   cols = c(`1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `13`, `14`, `15`, `16`, `17`, `18`, `19`, `20`),
   names_to = "test_week",
   values_to = "body_weight"
)

data %>% colnames()

long_data <- long_data %>%
  pivot_longer(
    cols = matches("^\\d{1,2}\\.\\d{1,2}(\\.\\d{2})?$"),
    names_to = "date",
    values_to = "glucose_reading"
  )

long_data <- long_data %>%
  pivot_longer(
    cols = date,
    names_to = "test_weeks",
    values_to = "days"
  )


```

long_df <- data %>%
  pivot_longer(
    cols = -c(mouse_id, sex, genotype, dob, first_test_week), # Keep these columns
    names_to = c("measurement_type", "test_week"), # Specify the names
    names_pattern = "^(\\w+)_(\\d+)$" # Adjust regex for measurement and week
  ) %>%
  mutate(
    # Assign appropriate labels for the glucose readings and body weight
    glucose_reading = if_else(measurement_type == "glucose", value, NA_real_),
    body_weight = if_else(measurement_type == "body_weight", value, NA_real_)
  ) %>%
  select(mouse_id, sex, genotype, dob, first_test_week, test_week, glucose_reading, body_weight)
  
  
  
  
  
  
  
  
  %>% mutate(
    date = as.Date(date, format = "%m.%d") # Adjust format as needed
  ) %>%
  # Create a combined column for test_week and date
  mutate(combined = paste(test_week, date, sep = "_")) %>%
  # Select and arrange columns as needed
  select(mouse_id, sex, genotype, dob, first_test_week, test_week, body_weight, date, combined, glucose_reading)
  

```{r}
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(here)

file_path <- here("Glucose Tracking Results.xlsx")
sheet_names <- excel_sheets(file_path)
group_sheets <- sheet_names[grepl("Group", sheet_names)]
print(group_sheets)

first_group_sheet <- group_sheets[6]
data <- read_excel(file_path, sheet = first_group_sheet)

data <- data %>%
  rename_with(~ str_replace_all(str_to_lower(.), " ", "_"))

# Convert relevant columns to numeric, handling non-numeric entries
data <- data %>%
  mutate(across(matches("^\\d{1,2}$|^1[0-9]$|^20$"), as.numeric)) %>%
  mutate(across(matches("^\\d{1,2}\\.\\d{1,2}(\\.\\d{2})?$"), ~ as.numeric(.)))

# Check column types
str(data)

# Pivot longer for body weights
long_body_data <- data %>%
  pivot_longer(
    cols = matches("^[1-9]$|^1[0-9]$|^20$"),  # Match columns for body weights
    names_to = "test_week",
    values_to = "body_weight"
  )

# Pivot longer for glucose readings, ensuring the test week is retained
long_glucose_data <- data %>%
  pivot_longer(
    cols = matches("^\\d{1,2}\\.\\d{1,2}(\\.\\d{2})?$"),
    names_to = "date",
    values_to = "glucose_reading"
  ) %>%
  mutate(test_week = case_when(
    date == "8.11" ~ "1",
    date == "8.16" ~ "2",
    date == "8.31.23" ~ "3",
    date == "9.7.23" ~ "4",
    date == "9.14.23" ~ "5",
    date == "9.20.23" ~ "6",
    date == "9.27.23" ~ "7",
    date == "10.3.23" ~ "8",
    date == "10.10.23" ~ "9",
    date == "10.17.23" ~ "10",
    date == "10.24.23" ~ "11",
    date == "10.31.23" ~ "12",
    date == "11.7.23" ~ "13",
    date == "11.14.23" ~ "14",
    date == "11.21.23" ~ "15",
    date == "11.27.23" ~ "16",
    date == "12.4.23" ~ "17",
    date == "12.12.23" ~ "18",
    date == "12.18.23" ~ "19",
    date == "12.27.23" ~ "20"
  ))

# Ensure both datasets have the same joining columns
long_body_data <- long_body_data %>%
  select(mouse_id, sex, genotype, dob, first_test_week, test_week, body_weight)

long_glucose_data <- long_glucose_data %>%
  select(mouse_id, test_week, glucose_reading)

# Merge body weight and glucose reading data
combined_data <- long_body_data %>%
  left_join(long_glucose_data, by = c("mouse_id", "test_week"))

# Final structure: retain all columns
combined_data <- combined_data %>%
  select(mouse_id, sex, genotype, dob, first_test_week, test_week, glucose_reading, body_weight)

# View the result
head(combined_data)



```

```{r}
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(here)

# Load the Excel file and identify sheets
file_path <- here("Glucose Tracking Results.xlsx")
sheet_names <- excel_sheets(file_path)
group_sheets <- sheet_names[grepl("Group", sheet_names)]
print(group_sheets)

# Read the specified sheet
first_group_sheet <- group_sheets[7]
data <- read_excel(file_path, sheet = first_group_sheet)

# Rename columns to lower case with underscores
data <- data %>%
  rename_with(~ str_replace_all(str_to_lower(.), " ", "_"))

# Convert relevant columns to numeric, capturing all positive integers
data <- data %>%
  mutate(across(matches("^[0-9]+$"), as.numeric)) %>%  # Capture all positive integers
  mutate(across(matches("^\\d{1,2}\\.\\d{1,2}(\\.\\d{2})?$"), ~ as.numeric(.)))

# Check column names to identify glucose and body weight columns
column_names <- names(data)
glucose_cols <- column_names[grepl("^\\d{1,2}\\.\\d{1,2}(\\.\\d{2})?$", column_names)]
body_weight_cols <- column_names[grepl("^[0-9]+$", column_names)]  # Dynamic match for body weight columns

# Generate a mapping of test weeks dynamically based on their positions
test_weeks <- seq_along(glucose_cols)  # Create a sequence for weeks

# Create a dataframe for mapping
date_to_week <- data.frame(
  date = glucose_cols,
  test_week = as.character(test_weeks)
)

# Pivot longer for glucose readings
long_glucose_data <- data %>%
  pivot_longer(
    cols = all_of(glucose_cols),
    names_to = "date",
    values_to = "glucose_reading"
  ) %>%
  left_join(date_to_week, by = "date")  # Join to add test_week dynamically

# Pivot longer for body weights
long_body_data <- data %>%
  pivot_longer(
    cols = all_of(body_weight_cols),
    names_to = "test_week",
    values_to = "body_weight"
  ) %>%
  select(mouse_id, sex, genotype, dob, first_test_week, test_week, body_weight)

# Ensure test_week in long_glucose_data is character for proper join
long_glucose_data <- long_glucose_data %>%
  select(mouse_id, test_week, glucose_reading) %>%
  mutate(test_week = as.character(test_week))

# Merge body weight and glucose reading data
combined_data <- long_body_data %>%
  left_join(long_glucose_data, by = c("mouse_id", "test_week"))

# Final structure: retain all columns
combined_data <- combined_data %>%
  select(mouse_id, sex, genotype, dob, first_test_week, test_week, glucose_reading, body_weight)

# View the result
head(combined_data)


```

